# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(fzf)

source $ZSH/oh-my-zsh.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export EDITOR=nvim
bindkey -v

export PATH=${HOME}/local/bin:${PATH}
export LD_LIBRARY_PATH=${HOME}/local/lib:${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=${HOME}/local/lib64:${LD_LIBRARY_PATH}

# common aliases
# alias ls='exa --icons --git --sort=type'
alias ls='ls -G'
alias l='ls -l'
alias lsr='ls -l --sort=date'
alias py=python

export PYTASK_FILE='task.py'
alias t="python $PYTASK_FILE"

# fzf configs
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_CMD="fzf"
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse"
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude '.git'"
export FZF_PREVIEW_DIR='fd . {} --max-depth 1 --color always --max-results 50'

_fzf_compgen_path() {
  fd -I --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd -I --type d --hidden --follow --exclude ".git" . "$1"
}

# z integration (recent dirs)
export _Z_NO_RESOLVE_SYMLINKS=1
source ${HOME}/.z.sh
unalias z 2> /dev/null
# z - cd to recent directory
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -lt 2>&1 | tac | cut -d ' ' -f2- | awk '{$1=$1;print}' | ${FZF_CMD})"
}

git config --global alias.root 'rev-parse --show-toplevel'

# CTRL-O search file under the current directory and open
open-file-widget() {
  local cmd="${FZF_DEFAULT_COMMAND} 2> /dev/null"
  local files=$(eval "${cmd}" | ${FZF_CMD} --multi);
  if [[ -z $files ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="${EDITOR:-vim} ${files}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
zle     -N    open-file-widget
bindkey '^O' open-file-widget

# CTRL-P search file under the git root directory and open
open-project-file-widget() {
  local project_root=$(git rev-parse --show-toplevel 2> /dev/null)
  project_root=$(realpath --relative-to=./ ${project_root} 2> /dev/null)
  local cmd="${FZF_DEFAULT_COMMAND} . ${project_root} 2> /dev/null"
  local files=$(eval "${cmd}" | ${FZF_CMD} --multi);
  if [[ -z $files ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="${EDITOR:-vim} ${files}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
zle     -N   open-project-file-widget
bindkey '^P' open-project-file-widget

# CTRL-F - cd to selected directory
ctrl-f-widget() {
  local cmd="fd -I --type d --hidden --follow --exclude '.git' . 2> /dev/null"
  local dir=$(eval "${cmd}" | ${FZF_CMD} --preview ${FZF_PREVIEW_DIR})
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="cd ${(q)dir}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
zle     -N   ctrl-f-widget
bindkey '^F' ctrl-f-widget

# CTRL-G - cd to selected directory (project root)
ctrl-g-widget() {
  local project_root=$(git rev-parse --show-toplevel 2> /dev/null)
  project_root=$(realpath --relative-to=./ ${project_root})
  local cmd="fd -I --type d --hidden --follow --exclude '.git' . ${project_root} 2> /dev/null"
  local dir=$(eval "${cmd}" | ${FZF_CMD} --preview ${FZF_PREVIEW_DIR})
  if [[ -z "$dir" ]]; then
    zle redisplay
    return 0
  fi
  zle push-line # Clear buffer. Auto-restored on next prompt.
  BUFFER="cd ${(q)dir}"
  zle accept-line
  local ret=$?
  unset dir # ensure this doesn't end up appearing in prompt expansion
  zle reset-prompt
  return $ret
}
zle     -N   ctrl-g-widget
bindkey '^G' ctrl-g-widget

gl () {
  git --no-pager log --format=format:"%Cgreen %h %Cblue %cd %Creset %s %Cred %N" --date=short --graph $@
}
alias gs="git status -s -uno"
alias gc="git commit -m"
alias ga="git add"
alias gpu="git push origin main"
alias gpl="git pull origin main"

gae() {
  for ext in $@; do
    fd -I -e $ext | xargs git add -f
  done
}

alias em=emacs
